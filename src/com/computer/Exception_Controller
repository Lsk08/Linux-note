信号 signal
  允许一个进程种植另一个进程
  区别于异常 是系统内核中断当前进程

  信号就是一个事件 具体的事件处理由系统底层的异常处理程序处理
  但是信号是一个由内核发送给进程的通知 告知该进程某个事件已经发生
    信号是处理完成之后发送 or 之前发送
  也就是 进程之间通过信号可以交互 但是任然要借助系统内核的操作
    例如 除0 -> 发出一个SIGPFE的信号 告知进程出现了运算错误
         kill -> 发出一个SIGKIL信号 销毁另一个进程

    java的try catch也基于此??
      Error就是故障 或者 终止级别的异常 所以无法恢复
      Exception 就是 中断 或者 陷阱 然后通过 信号 获取事件通知
      然后进入catch/final 执行对应的代码

      从代码上看 也很像一个listener的模式

  发送信号
    内核通过改变【update】目标进程【上下文】的某些状态 来发送信号
      系统检测到一个错误 例如除0 内核直接触发
      另一个进程显示调用了kill   通过用户进程显示触发

  接受信号
    当内核发出的信号被目标进程响应的时候，就算做目标进程接受了信号
    目标进程可以选择3种方式处理信号
      忽略
      终止
      执行一个 信号处理程序【singal handler】 的用户层函数 捕获【catch】这个信号

    完全类似于java try-catch的设计

  待处理信号
    发送之后 而没有被 处理的就是待处理信号
    每种待处理信号只能有1个 多余的直接丢弃 ??
    并且 目标进程可以选择阻塞这些信号
    所以 此处采用一个队列维护 等待处理的消息 类似于 producer-consumer模式