并发 多个逻辑流在时间上并行
  在内核级别的应用
    一般在异常处理

  在应用级别的应用
    多核并行运算
    访问慢速I/O 交替执行I/O请求和其他命令 提高并发性
    实时交互
    服务端连接多个客户端

  应用级别的并发方式
    进程 由内核调度和维护 有独立的虚拟空间 进程之间的通信需要显示的进程间通信机制【interprocess communication】

    I/O复用 应用程序在进程中 显示调用自己的逻辑流 逻辑流模型相当于一个状态机 通过I/O的不同状态出发不同的逻辑
    也就是当数据到达时 显示的转换状态。 因为是同一个进程，所有的逻辑流共享一个地址空间

    线程 运行在单一进程上下文的不同逻辑控制流，由内核控制。可以看做 以上2种的结合体
    像进程流一样 由内核统一调度
    像I/O复用一样 共享同一个虚拟地址空间

  优缺点
    进程 有独立的地址空间 避免被另外的进程误操作 但是需要通过IPC共享信息
    I/O复用
      事件驱动模型 易于控制
      由于在同一个进程 自动共享地址空间
      高效 无需上下文切换 只在同一个进程内部

      缺点 编码复杂 尤其是对于粒度的控制
        例如 只能对于对应的事件处理对应的逻辑 导致代码数量成倍增加

    线程 现代操作系统运行在同一个进程创建多个线程
      线程由内核调度
      每个线程由自己的上下文 包括 线程ID、栈、指针、PC计数器
        ID为进程区分线程的唯一标识
      线程共享整个进程的地址空间

  关于线程
    线程的上下文切换比进程的切换快的多 因为在同一个进程内
    线程之间是对等的关系 类似于线程池 所以线程可以kill别的线程 或者 等待别的线程
