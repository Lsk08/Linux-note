操作系统
  操作系统 分为 内核 和 用户界面

内核
  主要分为
    文件管理程序
      管理文件的 位置 权限 和 文件磁盘空间的分配
      文件打开的过程 首先确定该用户是否有访问权限 如果有权限 文件系统就会提供查找和操纵这个文件的信息
    内存分配程序
      为每个程序分配足够的内存并且保证每个程序只能在自己的内存空间内运行
      另外 还需要能够跟踪到哪些可以不被使用的内存
      虚拟内存 把硬盘当做内存使用以扩大内存空间的技术
        把硬盘划分成与内存相同格式的页面【page】 通过页面调度【paging】来完成内存和硬盘内数据的转换 使在任意时刻内存中的数据就是运行当前程序所需要的数据
    设备驱动程序

    调度程序【scheduler】
      决定哪些程序可以运行 todo
    分配程序【dispatcher】
      为可运行的程序分配时间  todo


系统启动
  通常在内存中有一部分ROM存储了引导程序【boot loader】,启动的时候通过这个引导程序把硬盘中的操作系统加载到内存,然后运行,此时操作系统接管电脑并且开始运行
  这个过程被称为启动【booting】计算机

协调机器的活动
  进程的概念
    在操作系统的控制下执行的某个程序的活动称为进程【process】
    与进程对应的当前进程的状态称为进程状态【process state】,也就是进程在某一个时刻的快照,包括例如 PC、寄存器和相关的内存单元

  协调活动
    调度程序【scheduler】
      决定哪些程序可以运行
        通过一个进程池 把请求执行的进程入队 执行完成的进程出队
          维护一个进程表 每个进程包含了该进程的内存区域、优先级、状态
            状态 如果进程可以执行该进程的状态就是 就绪【ready】 如果因为某个事件而中断，例如I/O 等待输入等 就进入等待【waiting】状态
    分配程序【dispatcher】
      为可运行的程序分配时间
        在分时/多任务系统中依靠 多道程序设计【multiprogramming】 也就是把时间划分成时间片【time slice】
        然后CPU会允许就绪的进程每次执行一个时间片,叫做上下文切换
      上下文切换
        操作系统通过产生一个中断信号【interrupt】
        当CPU收到这个中断信号就会保留当前进程的位置 并且执行 中断处理程序【interrupt handler】
        中断处理程序 属于分配程序的一部分 用来处理中断信号
        处理中断信号  通过调度程序选出优先级最高的进程，使被选择的进程开始时间片【time slice】并开始执行
      提高效率
        可以节约用户的下一个请求或者等待外围设备来完成任务的时间
         例如 当一个进程请求I/O时，那么调度程序就会更新这个进程的状态为等待【waiting】,那么分配程序就不会为这个进程分配时间
         直到I/O完成时，调度程序会重新更新这个进程的状态为【ready】,这样该进程又会重新竞争时间片。也就是这部分I/O的时间可以用来执行其他任务
         导致总时间减少

进程之间的竞争
  保证一个临界区【critical region】互斥【mutual exclusion】的办法通常是使用一个信号量【semaphore】守护这个临界区
    方法一 使用中断屏蔽 和 中断允许指令 也就是保证整个临界区代码只有一个进程可以执行 [类似sync]
    方法二 compareAndSwap 通过原子性操作改变并判断信号量 [类似lock]

  死锁
    对不可共享资源的竞争
    对资源请求的不完整，也就是在请求了一些资源之后还要请求另外的资源
    一旦资源完成分配就不能强制回收

    死锁的处理
      建立资源强制回收机制 例如Linux的kill
    死锁的避免
      要求进程一次性申请完全部资源 [java -> 用同一个锁?]
      或者把不可共享的资源变成可共享资源 例如对同一个文件的读操作可以共享 或者 文件的分段读写
      按照顺序申请资源[?]

多核
  多核CPU确实可以同时执行多个进程 但是这任然需要多个进程的协作与竞争
