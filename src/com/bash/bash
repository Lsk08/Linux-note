变量
    $() and `` 命令结果变量
        version=$(uname -r) 或者 version=`uname -r`
    export 暴露变量给子程序使用
      在linux 中当前的登录之后，就获得了一个bash 之后的每个命令都是在这个bash的子程序中运行
      而linux 的子程序只继承父进程的环境变量 而不继承自定义变量
      而 export 就是把一个自定义变量变成环境变量
        name=kuma
        bash          //进入子程序
        echo ${name} //显示空
        exit
        export name
        bash
        echo${name} //显示kuma
    $表示当前进程的pid ?表示上一个指令的回传值
        echo $$
        echo $?
    变量测试替换
      如果str为null或者""则用新变量替换exp 否则用str
        var=${str-exp} if(str==null) var=exp else var=str
        var=${str:-exp} if(str==null||str=="") var=exp else var=str
      如果str为null或者""则报错输出至stderr 常用于检查变量是否存在 不存在则$?为1
        var=${str?exp} if(str==null) bash: str: error else var=str
        var=${str:-exp} if(str==null||str=="") bash: str: error else var=str
    系统配置文件
      使用login shell登录之后会读取配置文件 /etc/profile 和 ~/.bash_profile
        /etc/profile 为系统文件 不建议修改
        ~/.bash_profile 会读取 ~/.bashrc 又会读取 /etc/bashrc中的配置 也就是环境变量
        通常情况下直接修改 ~/.bashrc 添加环境变量即可 然后使用source ~/.bashrc重新加载
管线命令
    cut -d ' ' -f 5,6 --> 用于对同一行数据的切割 类似于split
    grep exp filename --> 搜索某一行 last|grep root 或者 grep 'exception' root.log

命令控制流
    ;分隔2个命令 继续执行 --> command1;command2
    command1 && command2 如果前一个命令$?==0 则继续执行后续的命令 否则不执行 --> ls /local/tmp && touch /local/tmps

判断
  类型判断 test -e filename
    -e 是否存在
    -f 是否为文件
    -d 是否为文件夹
    -r 是否为可读
    -w 是否为可写
    -x 是否可执行
  判断数字大小 test n1 -eq n2
    -eq -ne -gt -lt -ge -le
  判断字符串  test -z string
    -z 如果string为空 则返回true
    -n 如果为非空 则返回false
    test str1 == str2 str1和str2是否相等
    test str1 != str2
  多重条件
    test -r filename -a -x filename
  脚本的参数
    $0 表示脚本的文件名
    $1 - $n 表示第n个参数值
    $# 参数的个数
    $@ 列举所有参数
